import tensorflow as tf
import numpy as np
import os
from numpy import genfromtxt
from keras import backend as K
from keras.layers import Conv2D, ZeroPadding2D, Activation, Input, concatenate
from keras.models import Model
from keras.layers.normalization import BatchNormalization
from keras.layers.pooling import MaxPooling2D, AveragePooling2D
import deep_learning_block_embeddings
from keras.layers.core import Lambda, Flatten, Dense
from keras.utils import print_summary

def inception_resnet_A(X):
    """
    Implementation of an inception block
    """
    
    X_3x3 = Conv2D(32, (1, 1), data_format='channels_first', name ='inception_A_3x3_conv1')(X)  #https://keras.io/api/layers/convolution_layers/convolution2d/
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name = 'inception_A_3x3_bn1')(X_3x3)  #https://keras.io/api/layers/normalization_layers/batch_normalization/
    X_3x3 = Activation('relu')(X_3x3)   #https://keras.io/api/layers/activations/
    X_3x3 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_3x3)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_3x3 = Conv2D(32, (3, 3), data_format='channels_first', name='inception_A_3x3_conv2')(X_3x3)
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_3x3_bn2')(X_3x3)
    X_3x3 = Activation('relu')(X_3x3)
    
    X_5x5 = Conv2D(32, (1, 1), data_format='channels_first', name='inception_A_5x5_conv1')(X)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_5x5_bn1')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(32, (3, 3), data_format='channels_first', name='inception_A_5x5_conv2')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_5x5_bn2')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(32, (3, 3), data_format='channels_first', name='inception_A_5x5_conv3')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_5x5_bn3')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)

    X_1x1 = Conv2D(32, (1, 1), data_format='channels_first', name='inception_A_1x1_conv')(X)
    X_1x1 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_1x1_bn')(X_1x1)
    X_1x1 = Activation('relu')(X_1x1)
        
    # CONCAT
    inception = concatenate([X_3x3, X_5x5, X_1x1], axis=1)   #https://keras.io/api/layers/merging_layers/concatenate/
    inception = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(inception)
    inception = Conv2D(192, (1, 1), data_format='channels_first', name='inception_A_merge_conv')(inception)
    inception = BatchNormalization(axis=1, epsilon=0.00001, name='inception_A_merge_bn')(inception)
    inception = Activation('relu')(inception)
    
    inception2 = Add()([X,inception])
    return inception2

def reduction_block_A(X):
    X_3x3 = Conv2D(96, (3, 3),strides=(2,2), data_format='channels_first', name='reduction_A_3x3_conv1')(X)
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_A_3x3_bn1')(X_3x3)
    X_3x3 = Activation('relu')(X_3x3)

    X_5x5 = Conv2D(32, (1, 1), data_format='channels_first', name='reduction_A_5x5_conv1')(X)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_A_5x5_bn1')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(64, (3, 3), data_format='channels_first', name='reduction_A_5x5_conv2')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_A_5x5_bn2')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(64, (3, 3),strides=(2,2), data_format='channels_first', name='reduction_A_5x5_conv2')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_A_5x5_bn2')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)

    X_pool = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), data_format='channels_first')(X)
    X_pool = Conv2D(64, (1, 1), data_format='channels_first', name='reduction_A_pool_conv')(X_pool)
    X_pool = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_A_bn')(X_pool)
    X_pool = Activation('relu')(X_pool)
    X_pool = ZeroPadding2D(padding=(4, 4), data_format='channels_first')(X_pool)

    inception = concatenate([X_3x3, X_5x5, X_pool], axis=1)

    return inception

def inception_resnet_B(X):
    """
    Implementation of an inception block
    """
    
    X_7x7 = Conv2D(128, (1, 1), data_format='channels_first', name ='inception_B_7x7_conv1')(X)  #https://keras.io/api/layers/convolution_layers/convolution2d/
    X_7x7 = BatchNormalization(axis=1, epsilon=0.00001, name = 'inception_B_7x7_bn1')(X_7x7)  #https://keras.io/api/layers/normalization_layers/batch_normalization/
    X_7x7 = Activation('relu')(X_7x7)   #https://keras.io/api/layers/activations/
    X_7x7 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_7x7)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_7x7 = Conv2D(128, (1, 7), data_format='channels_first', name='inception_B_7x7_conv2')(X_7x7)
    X_7x7 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_B_7x7_bn2')(X_7x7)
    X_7x7 = Activation('relu')(X_7x7)
    X_7x7 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_7x7)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_7x7 = Conv2D(128, (7, 1), data_format='channels_first', name='inception_B_7x7_conv3')(X_7x7)
    X_7x7 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_B_7x7_bn3')(X_7x7)
    X_7x7 = Activation('relu')(X_7x7)
    
    X_1x1 = Conv2D(128, (1, 1), data_format='channels_first', name='inception_B_1x1_conv')(X)
    X_1x1 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_B_1x1_bn')(X_1x1)
    X_1x1 = Activation('relu')(X_1x1)
        
    # CONCAT
    inception = concatenate([X_7x7, X_1x1], axis=1)   #https://keras.io/api/layers/merging_layers/concatenate/
    inception = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(inception)
    inception = Conv2D(224, (1, 1), data_format='channels_first', name='inception_B_merge_conv')(inception)
    inception = BatchNormalization(axis=1, epsilon=0.00001, name='inception_B_merge_bn')(inception)
    inception = Activation('relu')(inception)
    
    inception2 = Add()([X,inception])
    return inception2

def reduction_block_B(X):
    X_3x3 = Conv2D(256, (1, 1), data_format='channels_first', name ='reduction_B_3x3_conv1')(X)  #https://keras.io/api/layers/convolution_layers/convolution2d/
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name = 'reduction_B_3x3_bn1')(X_3x3)  #https://keras.io/api/layers/normalization_layers/batch_normalization/
    X_3x3 = Activation('relu')(X_3x3)   #https://keras.io/api/layers/activations/
    X_3x3 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_3x3)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_3x3 = Conv2D(384, (3, 3),strides=(2, 2), data_format='channels_first', name='reduction_B_3x3_conv2')(X_3x3)
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_3x3_bn2')(X_3x3)
    X_3x3 = Activation('relu')(X_3x3)
    
    X_3x3_2 = Conv2D(256, (1, 1), data_format='channels_first', name ='reduction_B_3x3_2_conv1')(X)  #https://keras.io/api/layers/convolution_layers/convolution2d/
    X_3x3_2 = BatchNormalization(axis=1, epsilon=0.00001, name = 'reduction_B_3x3_2_bn1')(X_3x3_2)  #https://keras.io/api/layers/normalization_layers/batch_normalization/
    X_3x3_2 = Activation('relu')(X_3x3_2)   #https://keras.io/api/layers/activations/
    X_3x3_2 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_3x3_2)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_3x3_2 = Conv2D(256, (3, 3),strides=(2, 2), data_format='channels_first', name='reduction_B_3x3_2_conv2')(X_3x3_2)
    X_3x3_2 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_3x3_2_bn2')(X_3x3_2)
    X_3x3_2 = Activation('relu')(X_3x3_2)

    X_5x5 = Conv2D(256, (1, 1), data_format='channels_first', name='reduction_B_5x5_conv1')(X)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_5x5_bn1')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(256, (3, 3), data_format='channels_first', name='reduction_B_5x5_conv2')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_5x5_bn2')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)
    X_5x5 = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(X_5x5)
    X_5x5 = Conv2D(256, (3, 3),strides=(2,2), data_format='channels_first', name='reduction_B_5x5_conv2')(X_5x5)
    X_5x5 = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_5x5_bn2')(X_5x5)
    X_5x5 = Activation('relu')(X_5x5)

    X_pool = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), data_format='channels_first')(X)
    X_pool = Conv2D(64, (1, 1), data_format='channels_first', name='reduction_B_pool_conv')(X_pool)
    X_pool = BatchNormalization(axis=1, epsilon=0.00001, name='reduction_B_bn')(X_pool)
    X_pool = Activation('relu')(X_pool)
    X_pool = ZeroPadding2D(padding=(4, 4), data_format='channels_first')(X_pool)

    inception = concatenate([X_3x3,X_3x3_2, X_5x5, X_pool], axis=1)

    return inception

def inception_resnet_C(X):
    """
    Implementation of an inception block
    """
    
    X_3x3 = Conv2D(192, (1, 1), data_format='channels_first', name ='inception_C_3x3_conv1')(X)  #https://keras.io/api/layers/convolution_layers/convolution2d/
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name = 'inception_C_3x3_bn1')(X_3x3)  #https://keras.io/api/layers/normalization_layers/batch_normalization/
    X_3x3 = Activation('relu')(X_3x3)   #https://keras.io/api/layers/activations/
    X_3x3 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_3x3)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_3x3 = Conv2D(192, (1, 3), data_format='channels_first', name='inception_C_3x3_conv2')(X_3x3)
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_C_3x3_bn2')(X_3x3)
    X_3x3 = Activation('relu')(X_3x3)
    X_3x3 = ZeroPadding2D(padding=(1, 1), data_format='channels_first')(X_3x3)   #https://keras.io/api/layers/reshaping_layers/zero_padding2d/
    X_3x3 = Conv2D(192, (3, 1), data_format='channels_first', name='inception_C_3x3_conv3')(X_3x3)
    X_3x3 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_C_3x3_bn3')(X_3x3)
    X_3x3 = Activation('relu')(X_3x3)
    
    X_1x1 = Conv2D(192, (1, 1), data_format='channels_first', name='inception_C_1x1_conv')(X)
    X_1x1 = BatchNormalization(axis=1, epsilon=0.00001, name='inception_C_1x1_bn')(X_1x1)
    X_1x1 = Activation('relu')(X_1x1)
        
    # CONCAT
    inception = concatenate([X_3x3, X_1x1], axis=1)   #https://keras.io/api/layers/merging_layers/concatenate/
    inception = ZeroPadding2D(padding=(2, 2), data_format='channels_first')(inception)
    inception = Conv2D(960, (1, 1), data_format='channels_first', name='inception_C_merge_conv')(inception)
    inception = BatchNormalization(axis=1, epsilon=0.00001, name='inception_C_merge_bn')(inception)
    inception = Activation('relu')(inception)
    
    inception2 = Add()([X,inception])
    return inception2


def faceRecoModel(input_shape):
    """
    Implementation of the Inception model used for FaceNet
    
    Arguments:
    input_shape -- shape of the images of the dataset
    Returns:
    model -- a Model() instance in Keras
    """
        
    # Define the input as a tensor with shape input_shape
    X_input = Input(input_shape)

    # Zero-Padding
    X = ZeroPadding2D((3, 3))(X_input)
    
    # First Block
    X = Conv2D(64, (7, 7), strides = (2, 2), name = 'conv1')(X)
    X = BatchNormalization(axis = 1, name = 'bn1')(X)
    X = Activation('relu')(X)
    
    # Zero-Padding + MAXPOOL
    X = ZeroPadding2D((1, 1))(X)
    X = MaxPooling2D((3, 3), strides = 2)(X)
    
    # Second Block
    X = Conv2D(64, (1, 1), strides = (1, 1), name = 'conv2')(X)
    X = BatchNormalization(axis = 1, epsilon=0.00001, name = 'bn2')(X)
    X = Activation('relu')(X)
    
    # Zero-Padding + MAXPOOL
    X = ZeroPadding2D((1, 1))(X)

    # Second Block
    X = Conv2D(192, (3, 3), strides = (1, 1), name = 'conv3')(X)
    X = BatchNormalization(axis = 1, epsilon=0.00001, name = 'bn3')(X)
    X = Activation('relu')(X)
    
    # Zero-Padding + MAXPOOL
    X = ZeroPadding2D((1, 1))(X)
    X = MaxPooling2D(pool_size = 3, strides = 2)(X)
    
    # Inception 1: First inception blocks
    X = inception_resnet_A(X)
    X = inception_resnet_A(X)
    X = inception_resnet_A(X)
    X = inception_resnet_A(X)
    X = inception_resnet_A(X) 
    
    #Reduction_block 1
    X = reduction_block_A(X)
    
    # Inception 2: Second inception blocks
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    X = inception_resnet_B(X)
    
    #Reduction_block 2
    X = reduction_block_B(X)
    
    # Inception 3: Third inception block
    X = inception_resnet_C(X)
    X = inception_resnet_C(X)
    X = inception_resnet_C(X)
    X = inception_resnet_C(X)
    X = inception_resnet_C(X)
    
    # Top layer
    X = AveragePooling2D(pool_size=(3, 3), strides=(1, 1), data_format='channels_first')(X)
    X = Flatten()(X)
    X = Dense(128, name='dense_layer')(X)
    
    # L2 normalization
    X = Lambda(lambda  x: K.l2_normalize(x,axis=1))(X)

    # Create model instance

    model = Model(inputs = X_input, outputs = X, name='FaceRecoModel2')
    return model
